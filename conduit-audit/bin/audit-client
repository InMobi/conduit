#!/bin/bash
#
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#


################################
# constants
################################

CLIENT_AUDIT_QUERY_CLASS="com.inmobi.conduit.audit.query.AuditDbQuery"
CLIENT_FEEDER_CLASS="com.inmobi.conduit.audit.AuditStats"
CLIENT_ADMIN_CLASS="com.inmobi.conduit.audit.AuditAdmin"
CLIENT_VALIDATOR_CLASS="com.inmobi.conduit.audit.validator.AuditValidator"

################################
# functions
################################

info() {
  local msg=$1

  echo "Info: $msg" >&2
}

warn() {
  local msg=$1

  echo "Warning: $msg" >&2
}

error() {
  local msg=$1
  local exit_code=$2

  echo "Error: $msg" >&2

  if [ -n "$exit_code" ] ; then
    exit $exit_code
  fi
}


display_help() {
  cat <<EOF
Usage: $0 audit [-group <TIER,HOSTNAME,TOPIC,CLUSTER>] 
          [-filter <TIER=xxx,HOSTNAME=xxx,TOPIC=xxx,CLUSTER=xxx>] [-percentile <comma separated list of percentiles>] <dd-mm-yyyy-HH:mm> <dd-mm-yyyy-HH:mm> --conf <confdir>
       $0 feeder --conf <confdir>
       $0 admin -rollup -date <dd-mm-yyyy> [-n <number of days] --conf <confdir>
       $0 admin -create -date <dd-mm-yyyy> [-n <number of days] --conf <confdir>
       $0 admin -checkpoint -date <dd-mm-yyyy> --conf <confdir>
       $0 admin -check -rolledup -date <dd-mm-yyyy> [-n <num of days>] --conf <confdir>
       $0 admin -check -created -date <dd-mm-yyyy> [-n <num of days>] --conf <confdir>
       $0 validate [--publish] [--consume [--numPublishers <num of publishers> --collector <file name of conf for collector consumer> --local <file name of conf for local consumer> --startTime <in dd-MM-yyyy-HH:mm>]] --topic <audit validator stream name> [-n|--numMessages <number of messages published per time interval>] [-t|--interval <Time interval in minutes to publish messages to test stream>] -c|--conf <path to conf dir>
EOF
}

run_client() {
  local CLIENT_APPLICATION_CLASS

  if [ "$#" -gt 0 ]; then
    CLIENT_APPLICATION_CLASS=$1
    shift
  else
    error "Must specify client application class" 1
  fi

  set -x
  exec $JAVA_HOME/bin/java $JAVA_OPTS  -Dsun.net.client.defaultConnectTimeout=60000 -Dsun.net.client.defaultReadTimeout=60000 -cp "$CLIENT_CLASSPATH" \
      "$CLIENT_APPLICATION_CLASS" $*
}

################################
# main
################################

# set default params
CLIENT_CLASSPATH=""
CLIENT_JAVA_LIBRARY_PATH=""
JAVA_OPTS="-Xmx128M"

opt_conf=""

mode=$1
shift

case "$mode" in
  help)
    display_help
    exit 0
    ;;
  audit)
    opt_audit=1
    ;;
  feeder)
    opt_feeder=1
    ;;
  admin)
    opt_admin=1
    ;;
  validate)
    opt_validate=1
    ;;
  *)
    error "Unknown or unspecified command '$mode'"
    echo
    display_help
    exit 1
    ;;
esac

while [ -n "$*" ] ; do
  arg=$1
  shift

  case "$arg" in
    --conf|-c)
      [ -n "$1" ] || error "Option --conf requires an argument" 1
      opt_conf=$1
      shift
      ;;
    --classpath|-C)
      [ -n "$1" ] || error "Option --classpath requires an argument" 1
      CLIENT_CLASSPATH=$1
      shift
      ;;
    -D*)
      JAVA_OPTS="${JAVA_OPTS} $arg"
      ;;
    *)
      args="$args $arg"
      ;;
  esac
done


# find java
if [ -z "${JAVA_HOME}" ] ; then
  echo "Warning: JAVA_HOME not set!"
    JAVA_DEFAULT=`type -p java`
    [ -n "$JAVA_DEFAULT" ] || error "Unable to find java executable. Is it in your PATH?" 1
    JAVA_HOME=$(cd $(dirname $JAVA_DEFAULT)/..; pwd)
fi

[ -n "${JAVA_HOME}" ] || error "Unable to find a suitable JAVA_HOME" 1

# figure out where the client distribution is
if [ -z "${CLIENT_HOME}" ] ; then
  CLIENT_HOME=$(cd $(dirname $0)/..; pwd)
fi
#echo CLIENT_HOME is $CLIENT_HOME


# Append to the classpath
if [ -n "${CLIENT_CLASSPATH}" ] ; then
  CLIENT_CLASSPATH="${CLIENT_HOME}/lib/*:$DEV_CLASSPATH:$CLIENT_CLASSPATH"
else
  CLIENT_CLASSPATH="${CLIENT_HOME}/lib/*:$DEV_CLASSPATH"
fi

# prepend conf dir to classpath
if [ -n "$opt_conf" ]; then
  CLIENT_CLASSPATH="$opt_conf:$CLIENT_CLASSPATH"
fi

if [ -z $HADOOP_HOME ]; then
  echo "Please define HADOOP_HOME to point to hadoop installation directory."
  exit 1
fi

#set classpath
for f in $HADOOP_HOME/hadoop-*.jar;do
  if [[ "$f" != *tool* ]]; then
    export CLIENT_CLASSPATH=$CLIENT_CLASSPATH:$f
  fi
done
for f in $HADOOP_HOME/lib/*.jar;do
  if [[ "$f" != *slf4j* ]]; then
    export CLIENT_CLASSPATH=$CLIENT_CLASSPATH:$f
  fi
done

# finally, invoke the appropriate command
if [ -n "$opt_audit" ] ; then
  run_client $CLIENT_AUDIT_QUERY_CLASS $args
fi
if [ -n "$opt_feeder" ] ; then
  run_client $CLIENT_FEEDER_CLASS $args
fi
if [ -n "$opt_validate" ] ; then
  run_client $CLIENT_VALIDATOR_CLASS $args
fi
if [ -n "$opt_admin" ] ; then
  run_client $CLIENT_ADMIN_CLASS $args
else
  error "This message should never appear" 1
fi
exit 0
